equivalence:
   add:
      cypher: |
         // find s, t nodes
         MERGE (s:_ {id: {source}})
         ON CREATE SET s :_:_VACANT

         MERGE (t:_ {id: {target}})
         ON CREATE SET t :_:_VACANT

         WITH s,t

         // find current equivalence class representatives (ECR)
         OPTIONAL MATCH (s) <-[:`=`]- (se:`=`)
         OPTIONAL MATCH (t) <-[:`=`]- (te:`=`)
         OPTIONAL MATCH (se) -[a]- ()
         OPTIONAL MATCH (te) -[b]- ()

         // wipe the arcs
         DELETE a, b

         // wipe the ECRs
         WITH s,t,se,te
         DELETE se, te

         // ensure that at this point we have only one row
         WITH DISTINCT s, t

         // create equivalence class node
         CREATE (eq:`=`)

         // create relation node
         MERGE (s) -[:«type»]-> (r:_:_Rel:«type» {id: {id}}) -[:«type»]-> (t)
         SET r.dataset = {dataset}

         // find all nodes reachable under the equivalence relation
         WITH s, t, r, eq
         OPTIONAL MATCH (s) -[:«type» * 0 ..]- (n:_)
            WHERE NOT n:_Rel // skip the relation nodes

         // link to new equivalence class representative
         MERGE n <-[:`=`]- eq

         // at this point we collect all members
         WITH s, t, r, eq, collect(DISTINCT n) AS members

         // find nodes related (outward) to these nodes `n`
         UNWIND members AS n
            OPTIONAL MATCH n -->(q:_Rel)--> () <-[:`=`]- (eq1:`=`)
               WHERE eq <> eq1
   
            // extract the labels on q and filter non-matching
            WITH head(filter(lab IN labels(q) WHERE NOT lab IN ["_", "_Rel"])) AS lb,
               s, t, r, eq, members, q, eq1
            WHERE NOT eq1 IS NULL 
   
            // create arc between equivalence classes 
            MERGE eq -[:`=R` {label: lb}]-> eq1

         // find nodes related (inward) to these nodes `n`
         WITH s, t, r, eq, members
         
         UNWIND members AS n
            OPTIONAL MATCH n <--(q:_Rel)<-- () <-[:`=`]- (eq2:`=`)
               WHERE eq <> eq2
   
            // extract the labels on q and filter non-matching
            WITH head(filter(lab IN labels(q) WHERE NOT lab IN ["_", "_Rel"])) AS lb,
               s, t, r, eq, n, q, eq2
            WHERE NOT eq2 IS NULL 
               
            // create arc between equivalence classes 
            MERGE eq <-[:`=R` {label: lb}]- eq2

         RETURN DISTINCT s, t, r, eq
   remove:
      cypher: |
         // find s, t nodes
         MATCH (r:_:_Rel {id: {id}})
         MATCH (s) -[x:«type»]-> (r) -[y:«type»]-> (t)
         DELETE x, y, r

         WITH s, t

         // remove all equivalence class nodes
         OPTIONAL MATCH (s) <-[:`=`]- (se:`=`)
         OPTIONAL MATCH (t) <-[:`=`]- (te:`=`)
         OPTIONAL MATCH () <-[x:`=`]- (se)
         OPTIONAL MATCH () <-[y:`=`]- (te)

         WITH s, t, se, te,
              collect(DISTINCT x) AS a1,
              collect(DISTINCT y) AS a2

         FOREACH (a IN a1 | DELETE a)
         FOREACH (a IN a2 | DELETE a)

         DELETE se
         DELETE te

         WITH s, t

         // create equivalence class nodes for s and t
         MERGE (s) <-[:`=`]- (s_ec:`=`)
         MERGE (t) <-[:`=`]- (t_ec:`=`)

         WITH s, t, s_ec, t_ec

         // find all nodes reachable from s under the euivalence relation
         OPTIONAL MATCH (s) -[:«type» * 0 .. 12]- (n:_)
         WHERE NOT n:_Rel // skip the relation nodes
               AND n <> s // don't include s, already have arc

         OPTIONAL MATCH (t) -[:«type» * 0 .. 12]- (m:_)
         WHERE NOT m:_Rel // skip the relation nodes
               AND m <> t // don't include s, already have arc

         WITH s, t, s_ec, t_ec, s_size
              collect(DISTINCT n) AS s_members,
              collect(DISTINCT m) AS t_members

         FOREACH (n IN s_members | 
           CREATE (s_ec) -[:`=`]-> (n) )

         FOREACH (n IN t_members | 
           CREATE (t_ec) -[:`=`]-> (n) )

         SET s_eq.size = length(s_members) + 2
         SET t_eq.size = length(t_members) + 2

         RETURN s, t, s_ec, t_ec
node:
   add:
      ruleset:
         - |  x  => (*)
         - | ( ) => (*)
         - | (*) => 500
      cypher: |
         MERGE (n:_:_VACANT:«type» {id: {id}})
         ON CREATE
            SET n = {data},
               n.created = timestamp(),
               n.id = {id},
               n.dataset = {dataset}
         ON MATCH
            SET n = {data},
                n.accessTime = timestamp(),
               n.counter = coalesce(n.counter, 0) + 1,
               n.id = {id},
               n.dataset = {dataset}
            REMOVE n:_VACANT
         RETURN n
   update:
      ruleset:
         - |  x  => 404
         - | ( ) => (*)
         - | (*) => (*)
      cypher: |
         MATCH (n:_ {id: {id}})
         WITH n, coalesce(n.counter, 0) + 1 AS c
         SET n = {data},
             n.accessTime = timestamp(),
             n.counter = c,
             n.id = {id},
             n.dataset = {dataset}
         RETURN n
   remove:
      ruleset:
         - |    x  => 404
         - | --( ) => 404
         - |   (*) => x
         - | --(*) => --( )
      cypher: |
         MATCH (n:_ {id: {id}})
         WHERE NOT n:_VACANT
            SET n:_VACANT
            SET n={}
            SET n.id = {id}
            SET n.dataset = {dataset}
         UNION ALL
         OPTIONAL MATCH (n:_:_VACANT {id: {id}})
         WHERE length( (n)--() ) = 0
         DELETE n
         RETURN n
arc:
   add:
      ruleset:
         - |  x   x  => 404
         - | ( )  x   => ( )-->( )
         - | (*)  x   => (*)-->( )
         - |  x  ( )  => ( )-->( )
         - |  x  (*)  => ( )-->(*)
         - | ( ) ( )  => ( )-->( )
         - | (*) ( )  => (*)-->( )
         - | ( ) (*)  => ( )-->(*)
         - | (*) (*)  => (*)-->(*)
      cypher: |
         MERGE (s:_ {id: {source}})
         ON CREATE SET s :_:_VACANT
         MERGE (t:_ {id: {target}})
         ON CREATE SET t :_:_VACANT
         MERGE (s) <-[:`=`]- (eq1:`=`)
         MERGE (t) <-[:`=`]- (eq2:`=`)
         WITH s,t, eq1, eq2
         MERGE s -[:«type»]-> (r:_:_Rel:«type» {id: {id}}) -[:«type»]-> t
         SET r = {data},
             r.created = timestamp(),
             r.id = {id},
             r.dataset = {dataset}
         MERGE eq1 -[:`=R` {label: "«type»"}]-> eq2
         RETURN *
   update:
      ruleset:
         - |    x     x     =>  404
         - |   ( )    x     =>  404
         - |   (*)    x     =>  404
         - |    x    ( )    =>  404
         - |    x    (*)    =>  404
         - |   ( )-->( )    =>    ( )-->( )
         - |   (*)-->( )    =>    (*)-->( )
         - |   ( )-->(*)    =>    ( )-->(*)
         - |   (*)-->(*)    =>    (*)-->(*)
      cypher: |
         MATCH (s)-[:«type»]-(r:_:_Rel:«type» {id: {id}})-[:«type»]->(t)
         WITH r, coalesce(r.counter, 0) + 1 AS c
         SET r = {data},
             r.accessTime = timestamp(),
             r.counter = c,
             r.id = {id},
             r.dataset = {dataset}
         RETURN r
   remove:
      ruleset:
         - |    x     x     =>  404
         - |   ( )    x     =>  404
         - |   (*)    x     =>  404
         - |    x    ( )    =>  404
         - |    x    (*)    =>  404
         - |   ( )-->( )    =>     x     x
         - |   (*)-->( )    =>    (*)    x
         - |   ( )-->(*)    =>     x    (*)
         - |   (*)-->(*)    =>    (*)   (*)
         - | --( )-->( )--  =>  --( )   ( )--
         - | --(*)-->( )--  =>  --(*)   ( )--
         - | --( )-->(*)--  =>  --( )   (*)--
         - | --(*)-->(*)--  =>  --(*)   (*)--
         - |   ( )-->( )--  =>   x    ( )--
         - |   (*)-->( )--  =>  (*)   ( )--
         - |   ( )-->(*)--  =>   x    (*)--
         - |   (*)-->(*)--  =>  (*)   (*)--
         - | --( )-->( )    =>  --( )    x
         - | --(*)-->( )    =>  --(*)    x
         - | --( )-->(*)    =>  --( )   (*)
         - | --(*)-->(*)    =>  --(*)   (*)
      cypher: |
         MATCH (s)-[p:«type»]-(r:_:_Rel:«type» {id: {id}})-[q:«type»]->(t)
            DELETE p,q,r
         WITH s.id AS source, t.id AS target
         OPTIONAL MATCH (n:_:_VACANT)
            WHERE n.id IN [target, source] AND length( (n)-[]-() ) = 0
            DELETE n
         RETURN true
query:
   schema:
      description: Setup Neo4J schema
      cypher: |
         CREATE CONSTRAINT ON (n:_)
         	ASSERT n.id IS UNIQUE
   clean:
      description: Remove all managed nodes and edges
      cypher: |
         OPTIONAL MATCH (:_)-[e]-()
         	WITH DISTINCT e AS edge
         	DELETE edge
         	RETURN DISTINCT true AS success
         UNION
         OPTIONAL MATCH (n:_)
         	WITH DISTINCT n AS node
         	DELETE node
         	RETURN DISTINCT true AS success
         UNION
         OPTIONAL MATCH (e:`=`)
         	WITH DISTINCT e AS node
         	DELETE node
         	RETURN DISTINCT true AS success